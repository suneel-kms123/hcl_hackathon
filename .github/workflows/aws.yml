name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  TF_LOG: INFO                                            # set this to your Amazon ECR repository name
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
    
    - name: Terraform init
      id: init
      run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
    
    - name: Terraform plan
      id: plan
      if: github.event_name == 'push'
      run: terraform plan -no-color -input=false
      continue-on-error: true
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd appointment_Service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/appointment_service:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/appointment_service:$IMAGE_TAG
        echo "appointment_service_image=$ECR_REGISTRY/$ECR_REPOSITORY/appointment_service:$IMAGE_TAG" >> $GITHUB_OUTPUT
        cd ../patient_service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/appointment_service:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/appointment_service:$IMAGE_TAG
        echo "patient_service_image=$ECR_REGISTRY/$ECR_REPOSITORY/appointment_service:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: application-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ steps.build-image.outputs.appointment_service_image }}
        image: ${{ steps.build-image.outputs.appointment_service_image }}
      
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: patient-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ steps.build-image.outputs.patient_service_image }}
        image: ${{ steps.build-image.outputs.patient_service_image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
